# Debug Dockerfile for CapRover Build Issues
# This version includes comprehensive logging and debugging features

# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Accept build arguments from CapRover (optional)
ARG DATABASE_URL
ARG CAPROVER_GIT_COMMIT_SHA

# Install debugging tools
RUN apk add --no-cache \
    curl \
    wget \
    procps \
    htop

# Install build dependencies for native modules (argon2, etc.)
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    linux-headers

# Set Node.js memory limit and optimization flags for build
ENV NODE_OPTIONS="--max-old-space-size=4096 --max-semi-space-size=1024"
ENV UV_THREADPOOL_SIZE=64

# Set build-time environment variables early to avoid conflicts
# Use ARG value if provided, otherwise use dummy default
ENV DATABASE_URL=${DATABASE_URL:-"postgresql://dummy:dummy@localhost:5432/dummy"}
ENV NEXTAUTH_SECRET="dummy-secret-for-build-only-not-secure"
ENV NEXTAUTH_URL="http://localhost:3000"
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_TLS_REJECT_UNAUTHORIZED=0
ENV CI=true
ENV DISABLE_ESLINT_PLUGIN=true
ENV GENERATE_SOURCEMAP=false
ENV DISABLE_ESLINT=true
ENV TYPESCRIPT_NO_TYPE_CHECK=false
ENV CAPROVER_BUILD=true

# Display system information for debugging
RUN echo "üñ•Ô∏è System Information:" && \
    echo "   OS: $(uname -a)" && \
    echo "   Node: $(node --version)" && \
    echo "   NPM: $(npm --version)" && \
    echo "   Memory: $(free -h)" && \
    echo "   Disk: $(df -h .)" && \
    echo "   Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"

# Copy package files
COPY package*.json ./

# Display package information
RUN echo "üì¶ Package Information:" && \
    echo "   package.json size: $(wc -c < package.json) bytes" && \
    if [ -f "package-lock.json" ]; then \
      echo "   package-lock.json size: $(wc -c < package-lock.json) bytes"; \
    else \
      echo "   package-lock.json: Not present"; \
    fi

# Use debug script for npm install
COPY scripts/debug-npm-install.sh ./
RUN chmod +x debug-npm-install.sh && \
    echo "üöÄ Starting debug npm install..." && \
    ./debug-npm-install.sh

# Copy source code
COPY . .

# Display copied files information
RUN echo "üìÅ Source Code Information:" && \
    echo "   Total files: $(find . -type f | wc -l)" && \
    echo "   Source files: $(find src -name '*.ts' -o -name '*.tsx' -o -name '*.js' -o -name '*.jsx' 2>/dev/null | wc -l || echo '0')" && \
    echo "   Config files present:" && \
    ls -la next.config.js tsconfig.json tailwind.config.js 2>/dev/null || echo "   Some config files missing"

# Generate Prisma client with debugging
RUN echo "üîß Generating Prisma client with debug info..." && \
    echo "   Prisma schema: $(test -f prisma/schema.prisma && echo 'Present' || echo 'Missing')" && \
    echo "   Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')" && \
    node /app/node_modules/prisma/build/index.js generate && \
    echo "‚úÖ Prisma client generated at: $(date '+%Y-%m-%d %H:%M:%S UTC')"

# Use debug build script
COPY scripts/caprover-debug-build.sh ./
RUN chmod +x caprover-debug-build.sh && \
    echo "üèóÔ∏è Starting debug build process..." && \
    ./caprover-debug-build.sh

# Final verification
RUN echo "üîç Final Build Verification:" && \
    echo "   Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')" && \
    if [ -d ".next" ]; then \
      echo "   ‚úÖ .next directory exists"; \
      echo "   .next size: $(du -sh .next)"; \
      echo "   .next contents:"; \
      ls -la .next/; \
    else \
      echo "   ‚ùå .next directory missing"; \
      exit 1; \
    fi && \
    if [ -f "public/sw.js" ]; then \
      echo "   ‚úÖ Service worker: $(wc -c < public/sw.js) bytes"; \
    else \
      echo "   ‚ö†Ô∏è Service worker not found"; \
    fi && \
    echo "   Memory usage: $(free -h)" && \
    echo "   Disk usage: $(df -h .)"

# Production stage
FROM node:20-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Verify copied files
RUN echo "üîç Production Stage Verification:" && \
    echo "   Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')" && \
    echo "   server.js: $(test -f server.js && echo 'Present' || echo 'Missing')" && \
    echo "   public/: $(ls public/ | wc -l) files" && \
    echo "   .next/static/: $(find .next/static -type f | wc -l || echo '0') files" && \
    chown -R nextjs:nodejs /app && \
    echo "   Permissions set for nextjs user"

USER nextjs

EXPOSE 80

ENV PORT=80
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:80/api/health || exit 1

CMD ["node", "server.js"]