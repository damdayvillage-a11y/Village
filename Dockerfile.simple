# Simple Dockerfile for CapRover with minimal scripting to avoid hangs
# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies for native modules (argon2, etc.)
# These are needed for npm ci to compile native dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    linux-headers

# Accept build arguments from CapRover (optional)
ARG DATABASE_URL
ARG CAPROVER_GIT_COMMIT_SHA
ARG BUILD_MEMORY_LIMIT=1024

# Set Node.js memory and performance optimizations
# Configurable via BUILD_MEMORY_LIMIT ARG (default 1GB for 2GB VPS)
ENV NODE_OPTIONS="--max-old-space-size=${BUILD_MEMORY_LIMIT} --max-semi-space-size=256"
ENV UV_THREADPOOL_SIZE=64

# Set build-time environment variables
# These are dummy values for the build process only
# Real values should be set in CapRover environment variables
ENV DATABASE_URL=${DATABASE_URL:-"postgresql://dummy:dummy@localhost:5432/dummy"}
ENV NEXTAUTH_SECRET="dummy-secret-for-build-only-not-secure-min32chars"
ENV NEXTAUTH_URL="http://localhost:3000"
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV CI=true
ENV DISABLE_ESLINT_PLUGIN=true
ENV GENERATE_SOURCEMAP=false
ENV DISABLE_ESLINT=true
ENV TYPESCRIPT_NO_TYPE_CHECK=true
ENV CAPROVER_BUILD=true
ENV SKIP_DB_DURING_BUILD=true

# Copy package files for dependency caching
COPY package*.json ./

# Configure npm for CapRover environment
RUN echo "üîß Configuring npm for CapRover..." && \
    npm config set strict-ssl false && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set fund false && \
    npm config set update-notifier false && \
    npm config set audit false && \
    npm config set loglevel error && \
    npm config set progress false && \
    echo "‚úÖ NPM configured successfully"

# Install dependencies - simple and clean to avoid hangs
# Removed --verbose to prevent output buffering issues
# Removed --prefer-offline as it doesn't help with empty cache
RUN echo "üì¶ Installing dependencies..." && \
    echo "Start time: $(date)" && \
    npm ci --include=dev --no-audit --no-fund && \
    echo "Dependencies installed at: $(date)" && \
    echo "node_modules size: $(du -sh node_modules)"

# Copy Prisma schema first for better caching
COPY prisma ./prisma

# Copy scripts directory (needed for seed.ts and other utilities)
COPY scripts ./scripts

# Copy source files
COPY . .

# Generate Prisma client - use direct node path to avoid npx network calls
RUN echo "üîß Generating Prisma client..." && \
    echo "Prisma generation start: $(date)" && \
    node /app/node_modules/prisma/build/index.js generate --schema=/app/prisma/schema.prisma && \
    echo "Prisma generation complete: $(date)"

# Run database migrations during build (if DATABASE_URL is real, not dummy)
# This will be skipped during build if using dummy DB, but can run in initialization command
RUN if [ "$SKIP_DB_DURING_BUILD" != "true" ] && echo "$DATABASE_URL" | grep -qv "dummy:dummy"; then \
      echo "üîÑ Running database migrations..." && \
      node /app/node_modules/prisma/build/index.js migrate deploy --schema=/app/prisma/schema.prisma && \
      echo "‚úÖ Migrations complete"; \
    else \
      echo "‚è≠Ô∏è  Skipping migrations during build (will run via initialization command)"; \
    fi

# Build the application
RUN echo "üèóÔ∏è Building application..." && \
    echo "Build start time: $(date)" && \
    echo "Memory before build: $(free -h)" && \
    echo "Running: npm run build:production" && \
    npm run build:production && \
    echo "Build completed at: $(date)" && \
    echo "Verifying build output..." && \
    ls -la .next/ && \
    echo "Build verification complete" && \
    echo "üßπ Cleaning up build artifacts to save disk space..." && \
    rm -rf .next/cache && \
    rm -rf node_modules/.cache && \
    rm -rf /tmp/* && \
    rm -rf /root/.npm && \
    npm cache clean --force && \
    echo "Disk space after cleanup: $(df -h /)" && \
    echo "‚úÖ Cleanup complete"

# Production stage
FROM node:20-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application from builder stage
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy Prisma schema and generated client for runtime
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/@prisma ./node_modules/@prisma

# Copy tsx for running seed.ts and other TypeScript scripts
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/tsx ./node_modules/tsx
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.bin/tsx ./node_modules/.bin/tsx

# Copy dependencies required by seed.ts and auth (not traced by Next.js standalone)
# bcryptjs and argon2 - password hashing libraries
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/bcryptjs ./node_modules/bcryptjs
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/argon2 ./node_modules/argon2
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/@phc ./node_modules/@phc
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/node-addon-api ./node_modules/node-addon-api
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/node-gyp-build ./node_modules/node-gyp-build

# Copy scripts directory for runtime operations (seeding, validation, etc.)
COPY --from=builder --chown=nextjs:nodejs /app/scripts ./scripts

# Copy lib directory (required by seed.ts and other scripts)
COPY --from=builder --chown=nextjs:nodejs /app/lib ./lib

# Copy package.json for runtime metadata
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

# Verify copied files
RUN echo "Production files verification:" && \
    ls -la && \
    echo "Public files:" && ls -la public/ | head -5 && \
    echo "Static files:" && ls -la .next/static/ | head -5 && \
    echo "Prisma schema:" && ls -la prisma/ && \
    echo "Prisma client:" && ls -la node_modules/@prisma/ | head -5 && \
    echo "Scripts:" && ls -la scripts/ | head -10 && \
    echo "Lib directory:" && ls -la lib/ | head -10 && \
    echo "tsx binary:" && ls -la node_modules/.bin/tsx

# Copy entrypoint script
COPY --from=builder --chown=nextjs:nodejs /app/scripts/docker-entrypoint.sh /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh

USER nextjs

EXPOSE 80

ENV PORT=80
ENV HOSTNAME="0.0.0.0"

# Use entrypoint script that handles migrations and seeding
# Can be controlled via environment variables:
# - RUN_MIGRATIONS=true (to run migrations on startup)
# - RUN_SEED=true (to seed database on startup)
# - SKIP_ENV_VALIDATION=true (to skip startup validation)
ENTRYPOINT ["/app/docker-entrypoint.sh"]