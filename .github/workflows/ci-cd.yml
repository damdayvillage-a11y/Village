name: CI/CD Pipeline

on:
  push:
    branches: [ main, 'pr/*' ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Lint, Type-check & Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: villagedb_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/villagedb_test
        
      - name: Run Database Migrations (Push)
        run: npx prisma db push --skip-generate
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/villagedb_test
        
      - name: Lint
        run: npm run lint
        
      - name: Type check
        run: npm run type-check
        
      - name: Format check
        run: npm run format:check
        
      - name: Build
        run: npm run build
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/villagedb_test
        
      - name: Test
        run: npm run test -- --coverage --watchAll=false
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/villagedb_test
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        
      # Security audit
      - name: Security audit
        run: npm audit --audit-level high
        continue-on-error: true

  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.simple
          push: false
          tags: village:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DATABASE_URL=postgresql://dummy:dummy@localhost:5432/dummy
        
      - name: Test Docker Image
        run: |
          docker images village:ci-test
          echo "âœ… Docker build successful!"
  
  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --config=./lighthouse.config.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      # Deploy to CapRover staging
      - name: Deploy to CapRover Staging
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: '${{ secrets.CAPROVER_SERVER }}'
          app: '${{ secrets.CAPROVER_STAGING_APP }}'
          token: '${{ secrets.CAPROVER_APP_TOKEN }}'
          branch: '${{ github.head_ref }}'
          
      # Health check after staging deployment
      - name: Health Check Staging
        run: |
          chmod +x ./scripts/health-check.sh
          ./scripts/health-check.sh "https://${{ secrets.CAPROVER_STAGING_APP }}.${{ secrets.CAPROVER_SERVER }}" 20 10
        continue-on-error: true
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      # Deploy to CapRover production
      - name: Deploy to CapRover Production
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: '${{ secrets.CAPROVER_SERVER }}'
          app: '${{ secrets.CAPROVER_PRODUCTION_APP }}'
          token: '${{ secrets.CAPROVER_APP_TOKEN }}'
          branch: 'main'
          
      # Health check after production deployment
      - name: Health Check Production
        run: |
          chmod +x ./scripts/health-check.sh
          ./scripts/health-check.sh "https://${{ secrets.CAPROVER_PRODUCTION_APP }}.${{ secrets.CAPROVER_SERVER }}" 30 10